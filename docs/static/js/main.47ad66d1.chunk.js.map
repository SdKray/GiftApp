{"version":3,"sources":["components/AddCategory.jsx","helpers/getGifts.js","components/GifGridItem.jsx","components/GifGrid.jsx","hooks/useFetchGifs.js","components/GifExperApp.jsx","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","c","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","key","GifExperApp","props","categories","cat","ReactDOM","render","document","getElementById"],"mappings":"6MAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACbC,mBAAS,IADI,mBAC1CC,EAD0C,KAC9BC,EAD8B,KAYjD,OACC,0BAAMC,SARc,SAAAC,GACdA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAO,IACzBR,GAAc,SAACS,GAAD,OAAMP,GAAN,mBAAoBO,OAClCN,EAAc,OAKvB,4CACA,2BAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAbd,SAAAP,GACzBF,EAAcE,EAAEQ,OAAOF,Y,uBCNZG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAChBC,EADgB,iDACgCC,UACrDH,GAFqB,+DAIHI,MAAMF,GAJH,cAIhBG,EAJgB,gBAKCA,EAAKC,OALN,uBAKdC,EALc,EAKdA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAC5B,MAAO,CACNC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXd,kBAefM,GAfe,4CAAH,sDCEPO,EAAc,SAAC,GAAmB,EAAlBJ,GAAmB,IAAhBC,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAClC,OACI,yBAAKc,UAAU,8CACX,yBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,2BACCA,KCFAO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECFb,SAAAA,GAAa,IAAD,EACbd,mBAAS,CAClCqB,KAAM,GACNa,SAAS,IAH6B,mBAChCC,EADgC,KACzBC,EADyB,KAcvC,OATAC,qBAAU,WACTxB,EAAQC,GAAUwB,MAAK,SAAAd,GACtBY,EAAS,CACRf,KAAMG,EACNU,SAAS,SAGT,CAACpB,IAEGqB,EDN0BI,CAAazB,GAAjCa,EAN2B,EAMhCN,KAAaa,EANmB,EAMnBA,QAErB,OACC,oCACC,4BAAKpB,GACJoB,GAAW,yCACZ,yBAAKJ,UAAU,aACbH,EAAOJ,KAAI,SAAAC,GAAG,OACd,kBAAC,EAAD,eAAagB,IAAKhB,EAAIC,IAAQD,UEdtBiB,EAAc,SAAAC,GAAU,IAAD,EACC1C,mBAAS,CAAC,QADX,mBAC5B2C,EAD4B,KAChB5C,EADgB,KAMnC,OACC,oCACC,2CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BACA,4BACE4C,EAAWpB,KAAI,SAAAqB,GAAG,OAClB,kBAAC,EAAD,CAASJ,IAAKI,EAAK9B,SAAU8B,UCblCC,IAASC,OAAO,kBAAC,EAAD,MAAiBC,SAASC,eAAe,U","file":"static/js/main.47ad66d1.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n\tconst [inputValue, setInputValue] = useState('');\r\n\tconst handleInputchange = e => {\r\n\t\tsetInputValue(e.target.value);\r\n\t};\r\n\tconst handleSubmit = e => {\r\n        e.preventDefault();\r\n        if (inputValue.trim().length>2) {           \r\n            setCategories((c)=>[inputValue,...c])\r\n            setInputValue('')\r\n        }\r\n\t};\r\n\treturn (\r\n\t\t<form onSubmit={handleSubmit}>\r\n\t\t\t<h2>Add Category</h2>\r\n\t\t\t<input type='text' value={inputValue} onChange={handleInputchange} />\r\n\t\t</form>\r\n\t);\r\n};\r\n\r\nAddCategory.propTypes = {   \r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","export const getGifs = async category => {\r\n\tconst url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\r\n\t\tcategory\r\n\t)}&limit=15&api_key=hYd6AkhuNqlIwbo2DmGPiKM320JjHh2p`;\r\n\tconst resp = await fetch(url);\r\n\tconst { data } = await resp.json();\r\n\r\n\tconst gifs = data.map(img => {\r\n\t\treturn {\r\n\t\t\tid: img.id,\r\n\t\t\ttitle: img.title,\r\n\t\t\turl: img.images?.downsized_medium.url,\r\n\t\t};\r\n\t});\r\n\t// console.log(gifs);\r\n\treturn gifs;\r\n};\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ({id,title,url}) => {\r\n    return (\r\n        <div className=\"card animate__animated animate__backInDown\">\r\n            <img src={url} alt={title}/>\r\n            <p>\r\n            {title}\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n// import { getGifs } from '../helpers/getGifts';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\t// const [images, setImages] = useState([]);\r\n\r\n\t// useEffect(() => {\r\n\t// \tgetGifs(category).then(setImages);\r\n\t// }, [category]);\r\n\tconst { data:images, loading } = useFetchGifs(category);\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<h3>{category}</h3>\r\n\t\t\t{loading && <p>Loading...</p>}\r\n\t\t\t<div className='card-grid'>\r\n\t\t\t\t{images.map(img => (\r\n\t\t\t\t\t<GifGridItem key={img.id} {...img} />\r\n\t\t\t\t))}\r\n\t\t\t</div>\r\n\t\t</>\r\n\t);\r\n};\r\n","import { useState, useEffect } from 'react';\r\nimport { getGifs } from '../helpers/getGifts';\r\n\r\nexport const useFetchGifs = category => {\r\n\tconst [state, setState] = useState({\r\n\t\tdata: [],\r\n\t\tloading: true,\r\n\t});\r\n\tuseEffect(() => {\r\n\t\tgetGifs(category).then(img => {\r\n\t\t\tsetState({\r\n\t\t\t\tdata: img,\r\n\t\t\t\tloading: false,\r\n\t\t\t});\r\n\t\t});\r\n\t}, [category]);\r\n\r\n\treturn state;\r\n};\r\n","import React, { useState } from 'react';\r\nimport { AddCategory } from './AddCategory';\r\nimport { GifGrid } from './GifGrid';\r\n// import PropTypes from 'prop-types'\r\n\r\nexport const GifExperApp = props => {\r\n\tconst [categories, setCategories] = useState(['PHP']);\r\n\r\n\t// const handleAdd= ()=>{\r\n\t//     setCategories(['Kaguya Sama',...categories])\r\n\t// }\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<h2>GifExperApp</h2>\r\n\t\t\t<AddCategory setCategories={setCategories} />\r\n\t\t\t<hr />\r\n\t\t\t<ol>\r\n\t\t\t\t{categories.map(cat => (\r\n\t\t\t\t\t<GifGrid key={cat} category={cat} />\r\n\t\t\t\t))}\r\n\t\t\t</ol>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\n// GifExperApp.propTypes = {\r\n\r\n// }\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { GifExperApp } from './components/GifExperApp';\n\nReactDOM.render(<GifExperApp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n//GifExpertApp\n"],"sourceRoot":""}